# -*- coding: utf-8 -*-
"""Copy of Temporal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HwysZyheDzHTc3imV4yA0VGgLvsuFEos
"""

import os
from google.colab import drive
drive.mount('/content/drive')
project_folder = '/content/drive/My Drive/Colab Notebooks/MODIFICATIONS/D_r' # working folder path
os.chdir(project_folder) # changing the path

import matplotlib.pyplot as plt
import numpy as np

case0 = np.load('result_0.npy', allow_pickle=True)
case1 = np.load('result_1.npy', allow_pickle=True)
case2 = np.load('result_2.npy', allow_pickle=True)

time0, mean0_abs, max0, it0, vel0, r0  = np.array(case0[0]), case0[1], case0[2], np.array(case0[3]), case0[4], case0[5]
time1, mean2_abs, max1, it1, vel1, r1  = np.array(case1[0]), case1[1], case1[2], case1[3], case1[4], case1[5]
time2, mean1_abs, max2, it2, vel2, r2  = np.array(case2[0]), case2[1], case2[2], case2[3], case2[4], case2[5]

# Create a figure with subplots
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 6), dpi=300)

# Setup for iterations ticks - we will use fewer ticks to avoid clutter
time_intervals = np.linspace(time0.min(), time0.max(), num=5)  # Only 5 time intervals
iteration_ticks = np.interp(time_intervals, time0, it0)  # Corresponding iteration ticks

# Plot for Mean Values
ax1 = axes[0]
ax1.plot(time0/60, mean0_abs, 'o-', color='#377eb8', label=f'D = {r0*2}')
ax1.plot(time1/60, mean1_abs, '^-', color='#ff7f00', label=f'D = {r1*2}')
ax1.plot(time2/60, mean2_abs, 's-', color='#4daf4a', label=f'D = {r2*2}')
ax1.set_xlabel('Time (minutes)')
ax1.set_ylabel('Mean Relative Change (%)')
ax1.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax1.legend(title='Diameter', loc='upper right')
ax1.set_yscale('log')  # Set y-axis to logarithmic scale

ax1_secondary = ax1.twiny()
ax1_secondary.set_xticks(time_intervals / 60)
ax1_secondary.set_xticklabels([f'{int(it)}' for it in iteration_ticks])
ax1_secondary.set_xlabel('Iterations')

# Plot for Max Values
ax2 = axes[1]
ax2.plot(time0/60, max0, 'o-', color='#377eb8', label=f'D = {r0*2}')
ax2.plot(time1/60, max1, '^-', color='#ff7f00', label=f'D = {r1*2}')
ax2.plot(time2/60, max2, 's-', color='#4daf4a', label=f'D = {r2*2}')
ax2.set_xlabel('Time (minutes)')
ax2.set_ylabel('Maximum Absolute Change')
ax2.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax2.legend(title='Diameter', loc='upper right')
ax2.set_yscale('log')  # Set y-axis to logarithmic scale

ax2_secondary = ax2.twiny()
ax2_secondary.set_xticks(time_intervals / 60)
ax2_secondary.set_xticklabels([f'{int(it)}' for it in iteration_ticks])
ax2_secondary.set_xlabel('Iterations')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

it0[-1]

import os
from google.colab import drive
drive.mount('/content/drive')
project_folder = '/content/drive/My Drive/Colab Notebooks/MODIFICATIONS/DIMENSIONS_r' # working folder path
os.chdir(project_folder) # changing the path

import matplotlib.pyplot as plt
import numpy as np

case0 = np.load('result_0.npy', allow_pickle=True)
case1 = np.load('result_1.npy', allow_pickle=True)
case2 = np.load('result_2.npy', allow_pickle=True)
case3 = np.load('result_3.npy', allow_pickle=True)


time0, mean0_abs, max0, it0, vel0, r0  = np.array(case0[0]), case0[1], case0[2], case0[3], case0[4], case0[5]
time1, mean1_abs, max1, it1, vel1, r1  = np.array(case1[0]), case1[1], case1[2], case1[3], case1[4], case1[5]
time2, mean2_abs, max2, it2, vel2, r2  = np.array(case2[0]), case2[1], case2[2], case2[3], case2[4], case2[5]
time3, mean3_abs, max3, it3, vel3, r3  = np.array(case3[0]), case3[1], case3[2], case3[3], case3[4], case3[5]

# Create a figure with subplots
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 6), dpi=300)

# Plot for Mean Values
ax1 = axes[0]
ax1.plot(time0/60, mean0_abs, 'o-', color='#377eb8', label='6240x3120')
ax1.plot(time1/60, mean1_abs, '^-', color='#ff7f00', label='3120x1560')
ax1.plot(time2/60, mean2_abs, 's-', color='#4daf4a', label='1560x780')
ax1.plot(time3/60, mean3_abs, '>-', color='#e41a1c', label='780x390')
ax1.set_xlabel('Time (minutes)')
ax1.set_ylabel('Mean Relative Change (%)')
ax1.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax1.legend(title='Domain (Nx x Ny)', loc='upper right')
ax1.set_yscale('log')  # Set y-axis to logarithmic scale
ax1.set_xscale('log')

# Plot for Max Values
ax2 = axes[1]
ax2.plot(time0/60, max0, 'o-', color='#377eb8', label='6240x3120')
ax2.plot(time1/60, max1, '^-', color='#ff7f00', label='3120x1560')
ax2.plot(time2/60, max2, 's-', color='#4daf4a', label='1560x780')
ax2.plot(time3/60, max3, '>-', color='#e41a1c', label='780x390')
ax2.set_xlabel('Time (minutes)')
ax2.set_ylabel('Maximum Absolute Change')
ax2.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax2.legend(title='Domain (Nx x Ny)', loc='upper right')
ax2.set_yscale('log')  # Set y-axis to logarithmic scale
ax2.set_xscale('log')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

# Create a figure with subplots
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 6), dpi=300)

# Plot for Mean Values
ax1 = axes[0]
ax1.plot(it0, mean0_abs, 'o-', color='#377eb8', label='6240x3120')
ax1.plot(it1, mean1_abs, '^-', color='#ff7f00', label='3120x1560')
ax1.plot(it2, mean2_abs, 's-', color='#4daf4a', label='1560x780')
ax1.plot(it3, mean3_abs, '>-', color='#e41a1c', label='780x390')
ax1.set_xlabel('Iterations')
ax1.set_ylabel('Mean Relative Change (%)')
ax1.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax1.legend(title='Domain (Nx x Ny)', loc='upper right')
ax1.set_yscale('log')  # Set y-axis to logarithmic scale
ax1.set_xscale('log')

# Plot for Max Values
ax2 = axes[1]
ax2.plot(it0, max0, 'o-', color='#377eb8', label='6240x3120')
ax2.plot(it1, max1, '^-', color='#ff7f00', label='3120x1560')
ax2.plot(it2, max2, 's-', color='#4daf4a', label='1560x780')
ax2.plot(it3, max3, '>-', color='#e41a1c', label='780x390')
ax2.set_xlabel('Iterations')
ax2.set_ylabel('Maximum Absolute Change')
ax2.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax2.legend(title='Domain (Nx x Ny)', loc='upper right')
ax2.set_yscale('log')  # Set y-axis to logarithmic scale
ax2.set_xscale('log')

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

import matplotlib.pyplot as plt
vel_mag = np.sqrt(vel0[:,:,1]**2+vel0[:,:,2]**2)
# Plotting
plt.figure(figsize=(12, 5))
plt.imshow(vel_mag, origin='lower', cmap='viridis')
plt.colorbar(label='Velocity Magnitude')  # Adding a colorbar to show the magnitude scale
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.show()

vel_mag = np.sqrt(vel1[:,:,1]**2+vel1[:,:,2]**2)
# Plotting
plt.figure(figsize=(12, 5))
plt.imshow(vel_mag, origin='lower', cmap='viridis')
plt.colorbar(label='Velocity Magnitude')  # Adding a colorbar to show the magnitude scale
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.show()


vel_mag = np.sqrt(vel2[:,:,1]**2+vel2[:,:,2]**2)
# Plotting
plt.figure(figsize=(12, 5))
plt.imshow(vel_mag, origin='lower', cmap='viridis')
plt.colorbar(label='Velocity Magnitude')  # Adding a colorbar to show the magnitude scale
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.show()


vel_mag = np.sqrt(vel3[:,:,1]**2+vel3[:,:,2]**2)
# Plotting
plt.figure(figsize=(12, 5))
plt.imshow(vel_mag, origin='lower', cmap='viridis')
plt.colorbar(label='Velocity Magnitude')  # Adding a colorbar to show the magnitude scale
plt.xlabel('X Coordinate')
plt.ylabel('Y Coordinate')
plt.show()

import os
from google.colab import drive
drive.mount('/content/drive')
project_folder = '/content/drive/My Drive/Colab Notebooks/MODIFICATIONS/final' # working folder path
os.chdir(project_folder) # changing the path

case0 = np.load('result_0.npy', allow_pickle=True)
case1 = np.load('result_1.npy', allow_pickle=True)
case2 = np.load('result_2.npy', allow_pickle=True)
case3 = np.load('result_3.npy', allow_pickle=True)
case4 = np.load('result_4.npy', allow_pickle=True)
case5 = np.load('result_5.npy', allow_pickle=True)
case6 = np.load('result_6.npy', allow_pickle=True)
case7 = np.load('result_7.npy', allow_pickle=True)
case8 = np.load('result_8.npy', allow_pickle=True)
case9 = np.load('result_9.npy', allow_pickle=True)



time0, mean0_abs, max0, it0, vel0  = np.array(case0[0]), case0[1], case0[2], case0[3], case0[4]
time1, mean1_abs, max1, it1, vel1  = np.array(case1[0]), case1[1], case1[2], case1[3], case1[4]
time2, mean2_abs, max2, it2, vel2  = np.array(case2[0]), case2[1], case2[2], case2[3], case2[4]
time3, mean3_abs, max3, it3, vel3  = np.array(case3[0]), case3[1], case3[2], case3[3], case3[4]
time4, mean4_abs, max4, it4, vel4  = np.array(case4[0]), case4[1], case4[2], case4[3], case4[4]
time5, mean5_abs, max5, it5, vel5  = np.array(case5[0]), case5[1], case5[2], case5[3], case5[4]
time6, mean6_abs, max6, it6, vel6  = np.array(case6[0]), case6[1], case6[2], case6[3], case6[4]
time7, mean7_abs, max7, it7, vel7  = np.array(case7[0]), case7[1], case7[2], case7[3], case7[4]
time8, mean8_abs, max8, it8, vel8  = np.array(case8[0]), case8[1], case8[2], case8[3], case8[4]
time9, mean9_abs, max9, it9, vel9  = np.array(case9[0]), case9[1], case9[2], case9[3], case9[4]

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(16, 6), dpi=300)

# Define colors for each dataset
colors = ['#377eb8', '#ff7f00', '#4daf4a', '#f781bf', '#a65628', '#984ea3', '#999999', '#e41a1c', '#dede00', '#000000']

# Plot for Max Values using unique colors and smaller markers
ax1 = axes[0]
ax1.plot(time0/60, max0, 'o-', color=colors[0], markersize=2)
ax1.plot(time1/60, max1, 'o-', color=colors[1], markersize=2)
ax1.plot(time2/60, max2, 'o-', color=colors[2], markersize=2)
ax1.plot(time3/60, max3, 'o-', color=colors[3], markersize=2)
ax1.plot(time4/60, max4, 'o-', color=colors[4], markersize=2)
ax1.plot(time5/60, max5, 'o-', color=colors[5], markersize=2)
ax1.plot(time6/60, max6, 'o-', color=colors[6], markersize=2)
ax1.plot(time7/60, max7, 'o-', color=colors[7], markersize=2)
ax1.plot(time8/60, max8, 'o-', color=colors[8], markersize=2)
ax1.plot(time9/60, max9, 'o-', color=colors[9], markersize=2)

# Setting x and y labels
ax1.set_xlabel('Time (minutes)')
ax1.set_ylabel('Maximum Absolute Change')
ax1.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)

# Set logarithmic scale for both axes
ax1.set_yscale('log')
ax1.axhline(y=8e-6, color='red', linestyle='--')



ax2 = axes[1]
ax2.plot(it0, max0, 'o-', color=colors[0], markersize=2)
ax2.plot(it1, max1, 'o-', color=colors[1], markersize=2)
ax2.plot(it2, max2, 'o-', color=colors[2], markersize=2)
ax2.plot(it3, max3, 'o-', color=colors[3], markersize=2)
ax2.plot(it4, max4, 'o-', color=colors[4], markersize=2)
ax2.plot(it5, max5, 'o-', color=colors[5], markersize=2)
ax2.plot(it6, max6, 'o-', color=colors[6], markersize=2)
ax2.plot(it7, max7, 'o-', color=colors[7], markersize=2)
ax2.plot(it8, max8, 'o-', color=colors[8], markersize=2)
ax2.plot(it9, max9, 'o-', color=colors[9], markersize=2)
ax2.set_xlabel('Iterations')
ax2.set_ylabel('Maximum Absolute Change')
ax2.grid(True, linestyle='--', linewidth=0.5, color='gray', alpha=0.7)
ax2.set_yscale('log')  # Set y-axis to logarithmic scale

ax2.axhline(y=8e-6, color='red', linestyle='--')


# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()
